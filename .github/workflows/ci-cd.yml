name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  K8S_NAMESPACE: production
  KUBECONFIG: /home/runner/.kube/config  # Chemin standard pour kubectl

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          tags: |
            ${{ env.DOCKERHUB_USER }}/frontend:latest
            ${{ env.DOCKERHUB_USER }}/frontend:${{ github.sha }}
          push: true

      - name: Build & Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          tags: |
            ${{ env.DOCKERHUB_USER }}/backend:latest
            ${{ env.DOCKERHUB_USER }}/backend:${{ github.sha }}
          push: true

  k8s-deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure Kubernetes
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
          chmod 600 $KUBECONFIG
          kubectl config use-context ${{ secrets.K8S_CONTEXT || 'default' }}

      - name: Verify Cluster Access
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy Applications
        run: |
          # Appliquer les configurations avec vérification
          kubectl apply -f k8s/ -n ${{ env.K8S_NAMESPACE }} --server-side=true --validate=true
          
          # Attendre le déploiement
          kubectl rollout status deployment/frontend -n ${{ env.K8S_NAMESPACE }} --timeout=5m
          kubectl rollout status deployment/backend -n ${{ env.K8S_NAMESPACE }} --timeout=5m
          
          # Vérification finale
          kubectl get all -n ${{ env.K8S_NAMESPACE }}
          kubectl get ingress -n ${{ env.K8S_NAMESPACE }}

      - name: Verify Application Health
        run: |
          # Attendre que l'application soit prête
          sleep 30
          INGRESS_HOST=$(kubectl get ingress -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.items[0].spec.rules[0].host}')
          curl -I http://$INGRESS_HOST