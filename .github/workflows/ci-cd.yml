name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_PASSWORD }}
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Build & Push Frontend
        run: |
          docker build -t $IMAGE_PREFIX/frontend:latest -f preprod/frontend/Dockerfile preprod/frontend
          docker push $IMAGE_PREFIX/frontend:latest

      - name: Build & Push Backend
        run: |
          docker build -t $IMAGE_PREFIX/backend:latest -f preprod/backend/Dockerfile preprod/backend
          docker push $IMAGE_PREFIX/backend:latest

  preprod:
    name: Deploy to Preprod
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /path/to/preprod
            git pull origin develop
            docker compose pull
            docker compose up -d --remove-orphans
          EOF

  prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f prod/k8s/
          kubectl rollout status deployment/frontend --timeout=300s
          kubectl rollout status deployment/backend --timeout=300s