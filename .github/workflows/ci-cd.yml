name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'  # Déclencher aussi si le workflow change

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/backend

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-22.04  # Version spécifique pour plus de stabilité
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Pour avoir tout l'historique git

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          registry: docker.io

      - name: Build Frontend
        uses: docker/build-push-action@v4
        id: build-frontend
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build Backend
        uses: docker/build-push-action@v4
        id: build-backend
        with:
          context: .
          file: backend/Dockerfile
          push: true
          tags: |
           ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
           ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  preprod:
    name: Deploy to Preprod
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy Services
        env:
          DOCKERHUB_USER: ${{ env.DOCKERHUB_USER }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOSSH'
            cd /path/to/preprod
            git pull origin develop
            docker compose pull --include-deps
            docker compose up -d --build --remove-orphans
            docker image prune -af
          EOSSH

  k8s:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.0'  # Version spécifique recommandée

      - name: Deploy to Kubernetes
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
        run: |
          echo "${{ secrets.KUBECONFIG }}" > $KUBECONFIG
          chmod 600 $KUBECONFIG
          kubectl apply -f prod/k8s/ --server-side=true
          kubectl rollout status deployment/frontend --timeout=5m
          kubectl rollout status deployment/backend --timeout=5m
          kubectl get pods -n ${{ vars.PROD_NAMESPACE || 'default' }} -o wide