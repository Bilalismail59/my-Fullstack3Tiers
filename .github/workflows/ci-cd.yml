name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci-cd.yml'

env:
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/backend
  KUBECONFIG: ${{ secrets.KUBECONFIG }}  # Définition centralisée

jobs:
  build:
    name: Build & Push Images
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build Backend
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  preprod:
    name: Deploy to Preprod
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy Services
        env:
          DOCKERHUB_USER: ${{ env.DOCKERHUB_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no \
          ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOSSH'
          cd /path/to/preprod
          git pull origin develop
          docker compose down
          docker compose pull --include-deps
          docker compose up -d --build --remove-orphans
          docker image prune -af
          EOSSH
  
  production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Kubernetes
        run: |
          # Création sécurisée du fichier kubeconfig avec le contenu du secret
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config

          # Vérification de la configuration
          export KUBECONFIG=~/.kube/config
          kubectl config view
          kubectl get nodes
            
          # Vérifie l'accès au namespace
          kubectl get ns ${{ vars.PROD_NAMESPACE || 'default' }}

      - name: Deploy to Kubernetes
        run: |
          # Applique les configurations avec validation
          kubectl apply -f prod/k8s/ --server-side=true --validate=true
          
          # Vérifie l'état des déploiements
          kubectl rollout status deployment/frontend --timeout=10m -n ${{ vars.PROD_NAMESPACE || 'default' }}
          kubectl rollout status deployment/backend --timeout=10m -n ${{ vars.PROD_NAMESPACE || 'default' }}
          
          # Vérification finale
          kubectl get all -n ${{ vars.PROD_NAMESPACE || 'default' }}
          kubectl get events -n ${{ vars.PROD_NAMESPACE || 'default' }} --sort-by=.metadata.creationTimestamp
